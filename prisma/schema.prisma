// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id Int @id @unique @default(autoincrement())
  username String @unique
  email String? @unique
  phone String? @unique
  password String
  isBanned Boolean @default(false) @map("is_banned")
  isEmailVerify Boolean @default(false) @map("is_email_verify")
  isTelegramVerify Boolean @default(false) @map("is_telegram_verify")
  role RoleEnum @default(USER)
  profilePhoto String @map("profile_photo")
  blackList Int[] @default([]) @map("black_list")
  twoFactorAuth twoFactorAuthEnum @default(NONE) @map("two_factor_auth")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at") @updatedAt

  products Product[] 
  reviews Review[]
  userProducts UserProducts[]
  sellerRequirement SellerRequirement?
  refreshToken Tokens?
  emailConfirmRequest EmailConfirms?
  order Orders?
  telegram Telegram?
  reports Report[]
  alerts Alert[]
  chats Chat[]
  messages Message[]

  @@map("user")
}

model Product {
  id Int @id @unique @default(autoincrement())
  name String 
  description String 
  price Float 
  rate Float @default(0)
  reportsCount Int @default(0)
  count Int @default(1)
  tags String[] @default(["none"])
  categories String[] @default([])
  productPhoto String @map("product_photo")
  isSold Boolean @default(false) @map("is_sold")
  sellerId Int @map("seller_id")
  users User[]
  reviews Review[]
  userProducts UserProducts[] 
  reports Report[]
  createdAt DateTime @default(now()) @map("created_at") 
  updatedAt DateTime @default(now()) @map("updated_at") @updatedAt

  @@map("product")
}

model Review {
  id Int @id @default(autoincrement())
  name String 
  description String 
  rate Float @default(0)
  productId Int @map("product_id")
  product Product @relation(fields: [productId], references: [id])
  authorId Int @map("author_id")
  author User @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at") @updatedAt

  @@map("review")
}

model UserProducts {
  id Int @default(autoincrement())
  userId Int @map("user_id")
  user User @relation(fields: [userId], references: [id])
  productId Int @map("product_id")
  productCount Int @default(1) @map("product_count")
  product Product @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at") @updatedAt

  @@map("user_products")
  @@id([productId, userId])
}

model SellerRequirement {
  id Int @id @default(autoincrement())
  userId Int @unique @map("user_id")
  user User @relation(fields: [userId], references: [id])
  fio String 
  phone String 
  email String 
  description String 
  isCompany Boolean @map("is_company")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at") @updatedAt
  @@map("seller_requirement")
}

model TelegramAuth {
  id Int @id @default(autoincrement())
  authToken String @map("auth_token") @unique
  userId Int @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at") @updatedAt

  @@map("telegram_auth")
}

model Tokens {
  id Int @id @default(autoincrement())
  userId Int @unique @map("user_id")
  user User @relation(fields: [userId], references: [id])
  token String 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at") @updatedAt

  @@map("tokens")
}

model Category {
  id Int @id @default(autoincrement())
  name String @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at") @updatedAt

  @@map("category")
}

model Report {
  id Int @id @default(autoincrement())
  authorId Int @map("author_id")
  author User @relation(fields: [authorId], references: [id])
  productId Int @map("product_id")
  product Product @relation(fields: [productId], references: [id])
  name String
  description String 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at") @updatedAt

  @@map("report")
}

model Alert {
  id Int @id @default(autoincrement())
  userId Int? @map("user_id")
  user User? @relation(fields: [userId], references: [id])
  description String 
  isGlobal Boolean @default(false) @map("is_global")
  deletedIds Int[] @default([]) @map("deleted_ids")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at") @updatedAt

  @@map("alert")
}

model Chat {
  id Int @id @default(autoincrement())
  userId Int @map("user_id")
  user User @relation(fields: [userId], references: [id])
  sellerId Int @map("seller_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at") @updatedAt
  messages Message[]

  @@map("chat")
}

model Message {
  id Int @id @default(autoincrement())
  text String @default("")
  chatId Int @map("chat_id") 
  chat Chat @relation(fields: [chatId], references: [id])
  userId Int @map("user_id")
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at") @updatedAt

  @@map("message")
}

model EmailConfirms {
  id Int @id @default(autoincrement())
  userId Int @map("user_id") @unique
  user User? @relation(fields: [userId], references: [id])
  urlTag String @map("url_tag") @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at") @updatedAt

  @@map("email_confirms")
}

model Orders {
  id Int @id @default(autoincrement())
  urlTag String @map("url_tag")
  productsInfo Json[] @map("products_info")
  userId Int @unique
  user User? @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at") @updatedAt

  @@map("orders")
}

model Payments {
  id Int @id @default(autoincrement())
  payUserId Int @map("pay_user_id")
  amount Int @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at") @updatedAt

  @@map("payments")
}

model Telegram {
  id Int @id @default(autoincrement())
  telegramId BigInt @unique @map("telegram_id")
  userId Int @unique @map("user_id")
  user User? @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at") @updatedAt

  @@map("telegram")
}

enum RoleEnum {
  ADMIN
  SELLER
  USER
}

enum twoFactorAuthEnum {
  NONE
  TELEGRAM 
  EMAIL
}